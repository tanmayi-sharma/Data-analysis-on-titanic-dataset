#Model2
#From the chart.Corrplot(), we can see that there is a reasonable relationshipbetween Survived and Sex
LogModel2 <- glm(Survived~Sex,data = TrainTitanic,family = binomial)
summary(LogModel2)
#Model3
#From the chart.Corrplot(), we can see that there is a reasonable relationship between Survived and Pclass
LogModel3 <- glm(Survived~Pclass,data = TrainTitanic,family = binomial)
summary(LogModel3)
#Model4
#From the chart.Corrplot(), we can see that there is a reasonable positive relationshipbetween Survived and Fare
LogModel4 <- glm(Survived~Fare,data = TrainTitanic,family = binomial)
summary(LogModel4)
#Model5 (Full Model)
#Without Parch and Fare
LogModel5 <- glm(Survived~.-Parch -Fare,data = TrainTitanic,family = binomial)
summary(LogModel5)
#Model6
#A model with all the variables which have a strong correlation coefficient with "Survived"
LogModel6 <- glm(Survived~Sex+Pclass+Fare+Parch,data = TrainTitanic,family = binomial)
summary(LogModel6)
#STEP 4: VARIABLE SELECTION METHODS
#Out of the various variable selection methods suitable for Logistic Regression, I choose "Stepwise Variable Selecion Method"
install.packages("MASS")
library("MASS")
step.model <- stepAIC(LogModel5,trace=F)
summary(step.model)
#Prediction of accuracy of full logistic regression model
predictionModel1 <- predict(LogModel5, type="response")
table(TrainTitanic$Survived, predictionModel1 >= 0.5)
#From the above two lines of code, we get "Confusion Matrix". Using this, we can calculate the Accuracy.
default<- 549/(549+342) #always predict Survived = 0 i.e didnt survive
accuracy <- (458 + 244)/ nrow(TrainTitanic) #(0- FALSE) and (1-TRUE) are accurate without errors like alpha and beeta.
cat("accuracy: ", accuracy, " > ", "baseline: ", default)
#STEP 6: Using the above model to predict how many of them survived in the TestTitanic dataset
predictedVals <- predict(LogModel5, type="response", newdata = TestTitanic)
#error should not b greater than 0.5
TestTitanic$Survived <-as.numeric(predictedVals >= 0.5)
table(TestTitanic$Survived)
#writing the Predicted values(PassengerId ans Survived of TestTitanic dataset) into an output file
Predictions = data.frame(TestTitanic[c("PassengerId","Survived")])
write.csv(file = "TitanicPred", x = Predictions)
#Loading the data
TrainTitanic <- read.csv("C:/Users/Tanmayi/Desktop/MINI PROJECT/train.csv",header=T)
TestTitanic <- read.csv("C:/Users/Tanmayi/Desktop/MINI PROJECT/test.csv",header=T)
#getting all the names of the train
names(TrainTitanic)
#inspecting the datatypes of all the variables in TrainTitanic Dataset
str(TrainTitanic)
#Changing the "Name" variable from Factor datatype to character datatype
TrainTitanic$Name <- as.character(TrainTitanic$Name)
#Changing the number of levels in "Embarked" variable from 4 levels to 3 levels- S,Q,C (',' Level is removed)
TrainTitanic$Embarked <- factor(TrainTitanic$Embarked,levels = c("C","Q","S"))
#inspecting the structure of the dataset after changing the datatypes
str(TrainTitanic)
#summary of TrainTitanic dataset
summary(TrainTitanic)
#From the output of the above summary function, we can clearly see that there are missing values in Age field
#Replacing the NA's in Age field with its mean value
TrainTitanic$Age[is.na(TrainTitanic$Age)] <- mean(TrainTitanic$Age, na.rm = TRUE)
summary(TrainTitanic)
#Similarly, we clean the TestTitanic dataset, by changing the datatypes of certain fields and replacing the NA's
names(TestTitanic)
str(TestTitanic)
TestTitanic$Name <- as.character(TestTitanic$Name)
str(TestTitanic)
summary(TestTitanic)
#Replacing the NA's of Age field with the mean of Age.
TestTitanic$Age[is.na(TestTitanic$Age)] <-mean(TestTitanic$Age, na.rm = T)
#Replacing the NA's of Fare field with the mean of Fare.
TestTitanic$Fare[is.na(TestTitanic$Fare)] <- mean(TestTitanic$Fare,na.rm = T)
summary(TestTitanic)
#Histogram to see the distribution of Age data
hist(TrainTitanic$Age, col= rainbow(8))
#Bar Graph of Sex categorical variable
var1 <- table(TrainTitanic$Sex)
barplot(var1,col = rainbow(6),xlab ="Sex", ylab ="Frequency",border = T)
#Boxplot of Fare
boxplot(TrainTitanic$Fare,border = T,col = rainbow(4),main="Boxplot of Fare")
#Boxplot of Fare Vs Survived
boxplot(TrainTitanic$Fare ~ TrainTitanic$Survived, border=T,main="May be the people who paid high fare survived?")
#Barplot of Pclass
var2 <- table(TrainTitanic$Pclass)
barplot(var2,border=T,xlab= "Class of the Passengers", ylab= "Frequency" , col=rainbow(5),main="Barplot of passenger Classes")
#barplot of Survived categorical variable
var3 <- table(TrainTitanic$Survived)
barplot(var3,border=T,xlab= "Survived", ylab= "Frequency" , col=rainbow(7),main="Barplot of passenger who survived vs died")
#barblop of parch
var4 <- table(TrainTitanic$Parch)
barplot(var4,border=T,xlab= "No of Children", ylab= "Frequency" , col=rainbow(8),main = "BarPlot of No of children per parents")
#barplot of Sibsp
var5 <- table(TrainTitanic$SibSp)
barplot(var5,border=T,xlab= "No.of Siblings and spouss per passenger", ylab= "Frequency" , col=rainbow(9),main="Barplot No.of Siblings and Spouses per Passenger")
#STEP 2:COMPUTATION OF CORRELATION MATRIX
#Note:Correlation Coefficient can only be calculated between numeric variables.
#So, we have to seperate certain variables to compute correlation matrix
useless = c("PassengerId","Name","Ticket","Cabin","Embarked")
#Removing these useless variables from the data frame
TrainTitanic=TrainTitanic[,!(names(TrainTitanic) %in% useless)]
str(TrainTitanic)
#renaming male and female as 0 and 1 for "Sex" variable, hence making it numeric(in Factor)
TrainTitanic$Sex <- as.numeric(TrainTitanic$Sex)
#similarly for TestTitanic
TestTitanic$Sex <- as.numeric(TestTitanic$Sex)
cor(TrainTitanic)
#The function corrplot(), in the package of the same name, creates a graphical display of a correlation matrix, highlighting the most correlated variables in a data table.
#In this plot, correlation coefficients are colored according to the value. Correlation matrix can be also reordered according to the degree of association between variables.
install.packages("corrplot")
#Use corrplot() to create a correlogram
#The function corrplot() takes the correlation matrix as the first argument. The second argument (type="upper") is used to display only the upper triangular of the correlation matrix.
library(corrplot)
M <- cor(TrainTitanic)
corrplot(M)
corrplot(M, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
#using chart.Correlation() to draw scatter plots
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(M,histogram = T, pch =19)
#Model1
LogModel1 = glm(Survived~., data=TrainTitanic, family= binomial)
summary(LogModel1)
#Model2
#From the chart.Corrplot(), we can see that there is a reasonable relationshipbetween Survived and Sex
LogModel2 <- glm(Survived~Sex,data = TrainTitanic,family = binomial)
summary(LogModel2)
#Model3
#From the chart.Corrplot(), we can see that there is a reasonable relationship between Survived and Pclass
LogModel3 <- glm(Survived~Pclass,data = TrainTitanic,family = binomial)
summary(LogModel3)
#Model4
#From the chart.Corrplot(), we can see that there is a reasonable positive relationshipbetween Survived and Fare
LogModel4 <- glm(Survived~Fare,data = TrainTitanic,family = binomial)
summary(LogModel4)
#Model5 (Full Model)
#Without Parch and Fare
LogModel5 <- glm(Survived~.-Parch -Fare,data = TrainTitanic,family = binomial)
summary(LogModel5)
corrplot(M)
library(corrplot)
#Model5 (Full Model)
#Without Parch and Fare
LogModel5 <- glm(Survived~.-Parch -Fare -SibSp,data = TrainTitanic,family = binomial)
summary(LogModel5)
#Model6
#A model with all the variables which have a strong correlation coefficient with "Survived"
LogModel6 <- glm(Survived~Sex+Pclass+Fare+Parch,data = TrainTitanic,family = binomial)
summary(LogModel6)
#STEP 4: VARIABLE SELECTION METHODS
#Out of the various variable selection methods suitable for Logistic Regression, I choose "Stepwise Variable Selecion Method"
install.packages("MASS")
library("MASS")
step.model <- stepAIC(LogModel5,trace=F)
summary(step.model)
#Model5 (Full Model)
#Without Parch and Fare
LogModel5 <- glm(Survived~.-Parch -SibSp,data = TrainTitanic,family = binomial)
summary(LogModel5)
#Model5 (Full Model)
#Without Parch and Fare
LogModel5 <- glm(Survived~.-Parch -Fare,data = TrainTitanic,family = binomial)
summary(LogModel5)
#Prediction of accuracy of full logistic regression model
predictionModel1 <- predict(LogModel5, type="response")
table(TrainTitanic$Survived, predictionModel1 >= 0.5)
#From the above two lines of code, we get "Confusion Matrix". Using this, we can calculate the Accuracy.
default<- 549/(549+342) #always predict Survived = 0 i.e didnt survive
accuracy <- (458 + 244)/ nrow(TrainTitanic) #(0- FALSE) and (1-TRUE) are accurate without errors like alpha and beeta.
#Loading the data
TrainTitanic <- read.csv("C:/Users/Tanmayi/Desktop/MINI PROJECT/train.csv",header=T)
TestTitanic <- read.csv("C:/Users/Tanmayi/Desktop/MINI PROJECT/test.csv",header=T)
#getting all the names of the train
names(TrainTitanic)
#inspecting the datatypes of all the variables in TrainTitanic Dataset
str(TrainTitanic)
#Changing the "Name" variable from Factor datatype to character datatype
TrainTitanic$Name <- as.character(TrainTitanic$Name)
#Changing the number of levels in "Embarked" variable from 4 levels to 3 levels- S,Q,C (',' Level is removed)
TrainTitanic$Embarked <- factor(TrainTitanic$Embarked,levels = c("C","Q","S"))
#inspecting the structure of the dataset after changing the datatypes
str(TrainTitanic)
#summary of TrainTitanic dataset
summary(TrainTitanic)
#From the output of the above summary function, we can clearly see that there are missing values in Age field
#Replacing the NA's in Age field with its mean value
TrainTitanic$Age[is.na(TrainTitanic$Age)] <- mean(TrainTitanic$Age, na.rm = TRUE)
summary(TrainTitanic)
#Similarly, we clean the TestTitanic dataset, by changing the datatypes of certain fields and replacing the NA's
names(TestTitanic)
str(TestTitanic)
TestTitanic$Name <- as.character(TestTitanic$Name)
str(TestTitanic)
summary(TestTitanic)
#Replacing the NA's of Age field with the mean of Age.
TestTitanic$Age[is.na(TestTitanic$Age)] <-mean(TestTitanic$Age, na.rm = T)
#Replacing the NA's of Fare field with the mean of Fare.
TestTitanic$Fare[is.na(TestTitanic$Fare)] <- mean(TestTitanic$Fare,na.rm = T)
summary(TestTitanic)
#Histogram to see the distribution of Age data
hist(TrainTitanic$Age, col= rainbow(8))
#Bar Graph of Sex categorical variable
var1 <- table(TrainTitanic$Sex)
barplot(var1,col = rainbow(6),xlab ="Sex", ylab ="Frequency",border = T)
#Boxplot of Fare
boxplot(TrainTitanic$Fare,border = T,col = rainbow(4),main="Boxplot of Fare")
#Boxplot of Fare Vs Survived
boxplot(TrainTitanic$Fare ~ TrainTitanic$Survived, border=T,main="May be the people who paid high fare survived?")
#Barplot of Pclass
var2 <- table(TrainTitanic$Pclass)
barplot(var2,border=T,xlab= "Class of the Passengers", ylab= "Frequency" , col=rainbow(5),main="Barplot of passenger Classes")
#barplot of Survived categorical variable
var3 <- table(TrainTitanic$Survived)
barplot(var3,border=T,xlab= "Survived", ylab= "Frequency" , col=rainbow(7),main="Barplot of passenger who survived vs died")
#barblop of parch
var4 <- table(TrainTitanic$Parch)
barplot(var4,border=T,xlab= "No of Children", ylab= "Frequency" , col=rainbow(8),main = "BarPlot of No of children per parents")
#barplot of Sibsp
var5 <- table(TrainTitanic$SibSp)
barplot(var5,border=T,xlab= "No.of Siblings and spouss per passenger", ylab= "Frequency" , col=rainbow(9),main="Barplot No.of Siblings and Spouses per Passenger")
#STEP 2:COMPUTATION OF CORRELATION MATRIX
#Note:Correlation Coefficient can only be calculated between numeric variables.
#So, we have to seperate certain variables to compute correlation matrix
useless = c("PassengerId","Name","Ticket","Cabin","Embarked")
#Removing these useless variables from the data frame
TrainTitanic=TrainTitanic[,!(names(TrainTitanic) %in% useless)]
str(TrainTitanic)
#renaming male and female as 0 and 1 for "Sex" variable, hence making it numeric(in Factor)
TrainTitanic$Sex <- as.numeric(TrainTitanic$Sex)
#similarly for TestTitanic
TestTitanic$Sex <- as.numeric(TestTitanic$Sex)
cor(TrainTitanic)
#The function corrplot(), in the package of the same name, creates a graphical display of a correlation matrix, highlighting the most correlated variables in a data table.
#In this plot, correlation coefficients are colored according to the value. Correlation matrix can be also reordered according to the degree of association between variables.
install.packages("corrplot")
install.packages("corrplot")
#Use corrplot() to create a correlogram
#The function corrplot() takes the correlation matrix as the first argument. The second argument (type="upper") is used to display only the upper triangular of the correlation matrix.
library(corrplot)
M <- cor(TrainTitanic)
corrplot(M)
#The function corrplot(), in the package of the same name, creates a graphical display of a correlation matrix, highlighting the most correlated variables in a data table.
#In this plot, correlation coefficients are colored according to the value. Correlation matrix can be also reordered according to the degree of association between variables.
install.packages("corrplot")
install.packages("corrplot")
#Use corrplot() to create a correlogram
#The function corrplot() takes the correlation matrix as the first argument. The second argument (type="upper") is used to display only the upper triangular of the correlation matrix.
library(corrplot)
M <- cor(TrainTitanic)
cor(TrainTitanic)
barplot(var5,border=T,xlab= "No.of Siblings and spouss per passenger", ylab= "Frequency" , col=rainbow(9),main="Barplot No.of Siblings and Spouses per Passenger")
#STEP 2:COMPUTATION OF CORRELATION MATRIX
#Note:Correlation Coefficient can only be calculated between numeric variables.
#So, we have to seperate certain variables to compute correlation matrix
useless = c("PassengerId","Name","Ticket","Cabin","Embarked")
#Removing these useless variables from the data frame
TrainTitanic=TrainTitanic[,!(names(TrainTitanic) %in% useless)]
str(TrainTitanic)
#renaming male and female as 0 and 1 for "Sex" variable, hence making it numeric(in Factor)
TrainTitanic$Sex <- as.numeric(TrainTitanic$Sex)
#similarly for TestTitanic
TestTitanic$Sex <- as.numeric(TestTitanic$Sex)
cor(TrainTitanic)
#The function corrplot(), in the package of the same name, creates a graphical display of a correlation matrix, highlighting the most correlated variables in a data table.
#In this plot, correlation coefficients are colored according to the value. Correlation matrix can be also reordered according to the degree of association between variables.
install.packages("corrplot")
install.packages("corrplot")
#Use corrplot() to create a correlogram
#The function corrplot() takes the correlation matrix as the first argument. The second argument (type="upper") is used to display only the upper triangular of the correlation matrix.
library(corrplot)
M <- cor(TrainTitanic)
corrplot(M)
corrplot(M, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
#using chart.Correlation() to draw scatter plots
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(M,histogram = T, pch =19)
#Model1
LogModel1 = glm(Survived~., data=TrainTitanic, family= binomial)
#The function corrplot(), in the package of the same name, creates a graphical display of a correlation matrix, highlighting the most correlated variables in a data table.
#In this plot, correlation coefficients are colored according to the value. Correlation matrix can be also reordered according to the degree of association between variables.
install.packages("corrplot")
install.packages("corrplot")
#Use corrplot() to create a correlogram
#The function corrplot() takes the correlation matrix as the first argument. The second argument (type="upper") is used to display only the upper triangular of the correlation matrix.
library(corrplot)
M <- cor(TrainTitanic)
corrplot(M)
corrplot(M, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
#using chart.Correlation() to draw scatter plots
install.packages("PerformanceAnalytics")
corrplot(M)
corrplot(M, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
#using chart.Correlation() to draw scatter plots
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(M,histogram = T, pch =19)
#Model1
LogModel1 = glm(Survived~., data=TrainTitanic, family= binomial)
summary(LogModel1)
#Model2
#From the chart.Corrplot(), we can see that there is a reasonable relationshipbetween Survived and Sex
LogModel2 <- glm(Survived~Sex,data = TrainTitanic,family = binomial)
summary(LogModel2)
#Model3
#From the chart.Corrplot(), we can see that there is a reasonable relationship between Survived and Pclass
LogModel3 <- glm(Survived~Pclass,data = TrainTitanic,family = binomial)
summary(LogModel3)
#Model4
#From the chart.Corrplot(), we can see that there is a reasonable positive relationshipbetween Survived and Fare
LogModel4 <- glm(Survived~Fare,data = TrainTitanic,family = binomial)
summary(LogModel4)
#Model5 (Full Model)
#Without Parch and Fare
LogModel5 <- glm(Survived~.-Parch -Fare,data = TrainTitanic,family = binomial)
summary(LogModel5)
#Model6
#A model with all the variables which have a strong correlation coefficient with "Survived"
LogModel6 <- glm(Survived~Sex+Pclass+Fare+Parch,data = TrainTitanic,family = binomial)
summary(LogModel6)
#STEP 4: VARIABLE SELECTION METHODS
#Out of the various variable selection methods suitable for Logistic Regression, I choose "Stepwise Variable Selecion Method"
install.packages("MASS")
library("MASS")
step.model <- stepAIC(LogModel5,trace=F)
summary(step.model)
#Prediction of accuracy of full logistic regression model
predictionModel1 <- predict(LogModel5, type="response")
table(TrainTitanic$Survived, predictionModel1 >= 0.5)
#From the above two lines of code, we get "Confusion Matrix". Using this, we can calculate the Accuracy.
default<- 549/(549+342) #always predict Survived = 0 i.e didnt survive
accuracy <- (458 + 244)/ nrow(TrainTitanic) #(0- FALSE) and (1-TRUE) are accurate without errors like alpha and beeta.
cat("accuracy: ", accuracy, " > ", "baseline: ", default)
#STEP 6: Using the above model to predict how many of them survived in the TestTitanic dataset
predictedVals <- predict(LogModel5, type="response", newdata = TestTitanic)
#error should not b greater than 0.5
TestTitanic$Survived <-as.numeric(predictedVals >= 0.5)
table(TestTitanic$Survived)
#writing the Predicted values(PassengerId ans Survived of TestTitanic dataset) into an output file
Predictions = data.frame(TestTitanic[c("PassengerId","Survived")])
write.csv(file = "TitanicPred", x = Predictions)
#Loading the data
TrainTitanic <- read.csv("C:/Users/Tanmayi/Desktop/MINI PROJECT/train.csv",header=T)
TestTitanic <- read.csv("C:/Users/Tanmayi/Desktop/MINI PROJECT/test.csv",header=T)
#getting all the names of the train
names(TrainTitanic)
#inspecting the datatypes of all the variables in TrainTitanic Dataset
str(TrainTitanic)
#Changing the "Name" variable from Factor datatype to character datatype
TrainTitanic$Name <- as.character(TrainTitanic$Name)
#Changing the number of levels in "Embarked" variable from 4 levels to 3 levels- S,Q,C (',' Level is removed)
TrainTitanic$Embarked <- factor(TrainTitanic$Embarked,levels = c("C","Q","S"))
#inspecting the structure of the dataset after changing the datatypes
str(TrainTitanic)
#summary of TrainTitanic dataset
summary(TrainTitanic)
#From the output of the above summary function, we can clearly see that there are missing values in Age field
#Replacing the NA's in Age field with its mean value
TrainTitanic$Age[is.na(TrainTitanic$Age)] <- mean(TrainTitanic$Age, na.rm = TRUE)
summary(TrainTitanic)
#Similarly, we clean the TestTitanic dataset, by changing the datatypes of certain fields and replacing the NA's
names(TestTitanic)
str(TestTitanic)
TestTitanic$Name <- as.character(TestTitanic$Name)
str(TestTitanic)
summary(TestTitanic)
#Replacing the NA's of Age field with the mean of Age.
TestTitanic$Age[is.na(TestTitanic$Age)] <-mean(TestTitanic$Age, na.rm = T)
#Replacing the NA's of Fare field with the mean of Fare.
TestTitanic$Fare[is.na(TestTitanic$Fare)] <- mean(TestTitanic$Fare,na.rm = T)
summary(TestTitanic)
#Histogram to see the distribution of Age data
hist(TrainTitanic$Age, col= rainbow(8))
#Bar Graph of Sex categorical variable
var1 <- table(TrainTitanic$Sex)
barplot(var1,col = rainbow(6),xlab ="Sex", ylab ="Frequency",border = T)
#Boxplot of Fare
boxplot(TrainTitanic$Fare,border = T,col = rainbow(4),main="Boxplot of Fare")
#Boxplot of Fare Vs Survived
boxplot(TrainTitanic$Fare ~ TrainTitanic$Survived, border=T,main="May be the people who paid high fare survived?")
#Barplot of Pclass
var2 <- table(TrainTitanic$Pclass)
barplot(var2,border=T,xlab= "Class of the Passengers", ylab= "Frequency" , col=rainbow(5),main="Barplot of passenger Classes")
#barplot of Survived categorical variable
var3 <- table(TrainTitanic$Survived)
barplot(var3,border=T,xlab= "Survived", ylab= "Frequency" , col=rainbow(7),main="Barplot of passenger who survived vs died")
#barblop of parch
var4 <- table(TrainTitanic$Parch)
barplot(var4,border=T,xlab= "No of Children", ylab= "Frequency" , col=rainbow(8),main = "BarPlot of No of children per parents")
#barplot of Sibsp
var5 <- table(TrainTitanic$SibSp)
barplot(var5,border=T,xlab= "No.of Siblings and spouss per passenger", ylab= "Frequency" , col=rainbow(9),main="Barplot No.of Siblings and Spouses per Passenger")
#STEP 2:COMPUTATION OF CORRELATION MATRIX
#Note:Correlation Coefficient can only be calculated between numeric variables.
#So, we have to seperate certain variables to compute correlation matrix
useless = c("PassengerId","Name","Ticket","Cabin","Embarked")
#Removing these useless variables from the data frame
TrainTitanic=TrainTitanic[,!(names(TrainTitanic) %in% useless)]
str(TrainTitanic)
#renaming male and female as 0 and 1 for "Sex" variable, hence making it numeric(in Factor)
TrainTitanic$Sex <- as.numeric(TrainTitanic$Sex)
#similarly for TestTitanic
TestTitanic$Sex <- as.numeric(TestTitanic$Sex)
cor(TrainTitanic)
#The function corrplot(), in the package of the same name, creates a graphical display of a correlation matrix, highlighting the most correlated variables in a data table.
#In this plot, correlation coefficients are colored according to the value. Correlation matrix can be also reordered according to the degree of association between variables.
install.packages("corrplot")
#Use corrplot() to create a correlogram
#The function corrplot() takes the correlation matrix as the first argument. The second argument (type="upper") is used to display only the upper triangular of the correlation matrix.
library(corrplot)
M <- cor(TrainTitanic)
corrplot(M)
corrplot(M, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
#using chart.Correlation() to draw scatter plots
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(M,histogram = T, pch =19)
#Model1
LogModel1 = glm(Survived~., data=TrainTitanic, family= binomial)
summary(LogModel1)
#Model2
#From the chart.Corrplot(), we can see that there is a reasonable relationshipbetween Survived and Sex
LogModel2 <- glm(Survived~Sex,data = TrainTitanic,family = binomial)
summary(LogModel2)
#Model3
#From the chart.Corrplot(), we can see that there is a reasonable relationship between Survived and Pclass
LogModel3 <- glm(Survived~Pclass,data = TrainTitanic,family = binomial)
summary(LogModel3)
#Model4
#From the chart.Corrplot(), we can see that there is a reasonable positive relationshipbetween Survived and Fare
LogModel4 <- glm(Survived~Fare,data = TrainTitanic,family = binomial)
summary(LogModel4)
#Model5 (Full Model)
#Without Parch and Fare
LogModel5 <- glm(Survived~.-Parch -Fare,data = TrainTitanic,family = binomial)
summary(LogModel5)
#Model6
#A model with all the variables which have a strong correlation coefficient with "Survived"
LogModel6 <- glm(Survived~Sex+Pclass+Fare+Parch,data = TrainTitanic,family = binomial)
summary(LogModel6)
#STEP 4: VARIABLE SELECTION METHODS
#Out of the various variable selection methods suitable for Logistic Regression, I choose "Stepwise Variable Selecion Method"
install.packages("MASS")
library("MASS")
step.model <- stepAIC(LogModel5,trace=F)
summary(step.model)
#Prediction of accuracy of full logistic regression model
predictionModel1 <- predict(LogModel5, type="response")
table(TrainTitanic$Survived, predictionModel1 >= 0.5)
#From the above two lines of code, we get "Confusion Matrix". Using this, we can calculate the Accuracy.
default<- 549/(549+342) #always predict Survived = 0 i.e didnt survive
accuracy <- (458 + 244)/ nrow(TrainTitanic) #(0- FALSE) and (1-TRUE) are accurate without errors like alpha and beeta.
cat("accuracy: ", accuracy, " > ", "baseline: ", default)
#STEP 6: Using the above model to predict how many of them survived in the TestTitanic dataset
predictedVals <- predict(LogModel5, type="response", newdata = TestTitanic)
#error should not b greater than 0.5
TestTitanic$Survived <-as.numeric(predictedVals >= 0.5)
table(TestTitanic$Survived)
#writing the Predicted values(PassengerId ans Survived of TestTitanic dataset) into an output file
Predictions = data.frame(TestTitanic[c("PassengerId","Survived")])
write.csv(file = "TitanicPred", x = Predictions)
#Histogram to see the distribution of Age data
hist(TrainTitanic$Age, col= rainbow(8))
#Bar Graph of Sex categorical variable
var1 <- table(TrainTitanic$Sex)
barplot(var1,col = rainbow(6),xlab ="Sex", ylab ="Frequency",border = T)
#Boxplot of Fare
boxplot(TrainTitanic$Fare,border = T,col = rainbow(4),main="Boxplot of Fare")
#Boxplot of Fare Vs Survived
boxplot(TrainTitanic$Fare ~ TrainTitanic$Survived, border=T,main="May be the people who paid high fare survived?")
#Barplot of Pclass
var2 <- table(TrainTitanic$Pclass)
barplot(var2,border=T,xlab= "Class of the Passengers", ylab= "Frequency" , col=rainbow(5),main="Barplot of passenger Classes")
#barplot of Survived categorical variable
var3 <- table(TrainTitanic$Survived)
barplot(var3,border=T,xlab= "Survived", ylab= "Frequency" , col=rainbow(7),main="Barplot of passenger who survived vs died")
#barblop of parch
var4 <- table(TrainTitanic$Parch)
barplot(var4,border=T,xlab= "No of Children", ylab= "Frequency" , col=rainbow(8),main = "BarPlot of No of children per parents")
#barplot of Sibsp
var5 <- table(TrainTitanic$SibSp)
barplot(var5,border=T,xlab= "No.of Siblings and spouss per passenger", ylab= "Frequency" , col=rainbow(9),main="Barplot No.of Siblings and Spouses per Passenger")
#STEP 2:COMPUTATION OF CORRELATION MATRIX
#Note:Correlation Coefficient can only be calculated between numeric variables.
#So, we have to seperate certain variables to compute correlation matrix
useless = c("PassengerId","Name","Ticket","Cabin","Embarked")
#Removing these useless variables from the data frame
TrainTitanic=TrainTitanic[,!(names(TrainTitanic) %in% useless)]
str(TrainTitanic)
#renaming male and female as 0 and 1 for "Sex" variable, hence making it numeric(in Factor)
TrainTitanic$Sex <- as.numeric(TrainTitanic$Sex)
#similarly for TestTitanic
TestTitanic$Sex <- as.numeric(TestTitanic$Sex)
cor(TrainTitanic)
#The function corrplot(), in the package of the same name, creates a graphical display of a correlation matrix, highlighting the most correlated variables in a data table.
#In this plot, correlation coefficients are colored according to the value. Correlation matrix can be also reordered according to the degree of association between variables.
install.packages("corrplot")
install.packages("corrplot")
#Use corrplot() to create a correlogram
#The function corrplot() takes the correlation matrix as the first argument. The second argument (type="upper") is used to display only the upper triangular of the correlation matrix.
library(corrplot)
M <- cor(TrainTitanic)
corrplot(M)
corrplot(M, type = "upper", order = "hclust", tl.col = "black", tl.srt = 45)
#using chart.Correlation() to draw scatter plots
install.packages("PerformanceAnalytics")
library("PerformanceAnalytics")
chart.Correlation(M,histogram = T, pch =19)
#Model1
LogModel1 = glm(Survived~., data=TrainTitanic, family= binomial)
summary(LogModel1)
#Model2
#From the chart.Corrplot(), we can see that there is a reasonable relationshipbetween Survived and Sex
LogModel2 <- glm(Survived~Sex,data = TrainTitanic,family = binomial)
summary(LogModel2)
